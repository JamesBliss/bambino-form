{"version":3,"sources":["webpack:///../src/Scope/Scope.js","webpack:///../src/Scope/Scope.docz.mdx","webpack:///../src/Input/Input.js"],"names":["Scope","_ref","path","children","_useContext","useContext","src_Context","scopePath","form","_objectWithoutPropertiesLoose","formattedPath","Object","core_browser_esm","Provider","value","_objectSpread","src_Scope_Scope","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","Scope_docz_objectWithoutPropertiesLoose","index_es","_extends","mdxType","id","parentName","index_esm","of","__position","__code","__scope","Playground","Props","object","string","Form","Context","Input","onSubmit","data","alert","JSON","stringify","name","placeholder","Consumer","_ref2","handleSubmit","onClick","e","_ref3","isMDXComponent","InputField","label","multiline","schema","rest","ref","React","_useDefault","useDefault","error","fieldName","defaultValue","_emotion_core__WEBPACK_IMPORTED_MODULE_9__","react__WEBPACK_IMPORTED_MODULE_10___default","a","Fragment","className","htmlFor","__webpack_exports__"],"mappings":"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","file":"component---src-scope-scope-docz-mdx-d37d849b83328a7a321f.js","sourcesContent":["\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport FormContext from '../Context';\n\nconst Scope = ({ path, children }) => {\n  const { scopePath, ...form } = useContext(FormContext);\n\n  // default to pure path\n  let formattedPath = path;\n  if (scopePath) {\n    // if number it should key differently to align with yup scheme.\n    formattedPath = (typeof path === 'number' ? `[${ path }]` : `.${ path }`);\n  }\n\n  // return new provider scroped to the new path\n  return (\n    <FormContext.Provider\n      value={ {\n        ...form,\n        scopePath: scopePath.concat(formattedPath)\n      } }\n    >\n      { children }\n    </FormContext.Provider>\n  );\n};\n\nScope.propTypes = {\n  /** New path of child elements to sit in. Number = ID in an arrya. String = key in object */\n  path: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string\n  ]).isRequired,\n  /** Inner components */\n  children: PropTypes.any.isRequired\n};\n\nexport default Scope;","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesbliss/Sites/@jamesbliss/bambino-form/.docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { object, string } from 'yup';\nimport Form from '../../src/Form/Form';\nimport Context from '../../src/Context/Context';\nimport Scope from '../../src/Scope/Scope';\nimport Input from '../../src/Input/Input';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"scope\"\n    }}>{`Scope`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Scope />`}</inlineCode>{` component is a magical component which allows you to nest fields!`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Scope} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'<Form onSubmit={data => alert(JSON.stringify(data, null, 2))}>\\n  <Input name=\\\"name\\\" placeholder=\\\"Name\\\" />\\n  <br />\\n  <Scope path=\\\"child\\\">\\n    <Input name=\\\"child_field\\\" placeholder=\\\"Child field\\\" />\\n  </Scope>\\n  <br />\\n  {/* This is required because docz doesn\\'t support form submission ü§¶‚Äç */}\\n  <Context.Consumer>\\n    {({ handleSubmit }) => (\\n      <button onClick={e => handleSubmit(e)}>Submit name </button>\\n    )}\\n  </Context.Consumer>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      object,\n      string,\n      Form,\n      Context,\n      Scope,\n      Input\n    }} mdxType=\"Playground\">\n  <Form onSubmit={data => alert(JSON.stringify(data, null, 2))} mdxType=\"Form\">\n    <Input name='name' placeholder='Name' mdxType=\"Input\" />\n    <br />\n    <Scope path='child' mdxType=\"Scope\">\n      <Input name='child_field' placeholder='Child field' mdxType=\"Input\" />\n    </Scope>\n    <br />\n    {\n          /* This is required because docz doesn't support form submission ü§¶‚Äç */\n        }\n    <Context.Consumer>\n      {({\n            handleSubmit\n          }) => <button onClick={e => handleSubmit(e)}>Submit name </button>}\n    </Context.Consumer>\n  </Form>\n    </Playground>\n    <h2 {...{\n      \"id\": \"usage-with-arrays\"\n    }}>{`Usage with arrays!`}</h2>\n    <Playground __position={2} __code={'<Form onSubmit={data => alert(JSON.stringify(data, null, 2))}>\\n  <Input name=\\\"name\\\" placeholder=\\\"Name\\\" />\\n  <br />\\n  <Scope path=\\\"child\\\">\\n    <Input name=\\\"child_field\\\" placeholder=\\\"Child field\\\" />\\n    <Scope path=\\\"child_array\\\">\\n      <Scope path={0}>\\n        <br />\\n        <Input name=\\\"child_array_field\\\" placeholder=\\\"Child array field\\\" />\\n      </Scope>\\n      <Scope path={1}>\\n        <br />\\n        <Input name=\\\"child_array_field\\\" placeholder=\\\"Child array field\\\" />\\n      </Scope>\\n    </Scope>\\n  </Scope>\\n  <br />\\n  {/* This is required because docz doesn\\'t support form submission ü§¶‚Äç */}\\n  <Context.Consumer>\\n    {({ handleSubmit }) => (\\n      <button onClick={e => handleSubmit(e)}>Submit name </button>\\n    )}\\n  </Context.Consumer>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      object,\n      string,\n      Form,\n      Context,\n      Scope,\n      Input\n    }} mdxType=\"Playground\">\n  <Form onSubmit={data => alert(JSON.stringify(data, null, 2))} mdxType=\"Form\">\n    <Input name='name' placeholder='Name' mdxType=\"Input\" />\n    <br />\n    <Scope path='child' mdxType=\"Scope\">\n      <Input name='child_field' placeholder='Child field' mdxType=\"Input\" />\n      <Scope path='child_array' mdxType=\"Scope\">\n        <Scope path={0} mdxType=\"Scope\">\n          <br />\n          <Input name='child_array_field' placeholder='Child array field' mdxType=\"Input\" />\n        </Scope>\n        <Scope path={1} mdxType=\"Scope\">\n          <br />\n          <Input name='child_array_field' placeholder='Child array field' mdxType=\"Input\" />\n        </Scope>\n      </Scope>\n    </Scope>\n    <br />\n    {\n          /* This is required because docz doesn't support form submission ü§¶‚Äç */\n        }\n    <Context.Consumer>\n      {({\n            handleSubmit\n          }) => <button onClick={e => handleSubmit(e)}>Submit name </button>}\n    </Context.Consumer>\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// helper\nimport useDefault from '../useDefault';\n\n// exported component\nconst InputField = ({\n  name,\n  label,\n  multiline,\n  schema,\n  value,\n  ...rest\n}) => {\n  const ref = React.useRef(null);\n\n  // custom behaviour and logic from useField\n  const {\n    error,\n    fieldName,\n    defaultValue,\n    ...bag\n  } = useDefault({\n    name,\n    ref,\n    schema,\n    value\n  });\n\n  // props to be spread on input elemnt\n  const props = {\n    ...rest,\n    ...bag,\n    defaultValue,\n    ref\n  };\n\n  return (\n    <>\n      { label && <label className='form__label' htmlFor={ fieldName }>{ label }</label> }\n\n      { multiline ? (\n        <textarea className='form__textarea' { ...props } />\n      ) : (\n        <input className='form__input' { ...props } />\n      ) }\n\n      { error && <span className='form__error'>{ error }</span> }\n    </>\n  );\n};\n\nInputField.defaultProps = {\n  label: null,\n  placeholder: '',\n  multiline: false,\n  schema: null,\n  value: null\n};\n\nInputField.propTypes = {\n  /** Name and ID for the field. This will define what this is called in the output */\n  name: PropTypes.string.isRequired,\n  /** Label to show next to the checkbox */\n  label: PropTypes.string,\n  /** placeholder text */\n  placeholder: PropTypes.string,\n  /** <textarea /> or <input /> */\n  multiline: PropTypes.bool,\n  /** Field level schema, will be overriden if a schema is passed into the <Form /> */\n  schema: PropTypes.any,\n  /** Initial value to populate the check state */\n  value: PropTypes.PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nexport default InputField;"],"sourceRoot":""}