{"version":3,"sources":["webpack:///../dist/Form/Form.docz.mdx","webpack:///../src/Input/Input.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","_extends","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_9__","__position","__code","__scope","Playground","object","string","Form","Context","Input","_src_Form_Form__WEBPACK_IMPORTED_MODULE_11__","onSubmit","data","alert","JSON","stringify","_src_Input_Input__WEBPACK_IMPORTED_MODULE_13__","name","placeholder","_src_Context_Context__WEBPACK_IMPORTED_MODULE_12__","Consumer","_ref2","handleSubmit","onClick","e","initialValues","first_name","last_name","_ref3","schema","shape","required","_ref4","isMDXComponent","InputField","label","multiline","value","rest","ref","React","_useDefault","useDefault","error","fieldName","defaultValue","_objectSpread","_emotion_core__WEBPACK_IMPORTED_MODULE_8__","react__WEBPACK_IMPORTED_MODULE_9___default","a","Fragment","htmlFor","__webpack_exports__"],"mappings":"8eAWO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,sIACFC,CAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,EAAAD,CAACP,EAADS,EAAA,GAAeV,EAAiBM,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAI5EH,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,QADR,QAGAJ,OAAAC,EAAA,EAAAD,CAAA,gBAAWA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,YAAX,wHACAL,OAAAC,EAAA,EAAAD,CAAA,SAAGA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,YAAH,mFACAL,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,eADR,eAGAJ,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,kWAAuWC,QAAS,CACjZX,QACAJ,kBACAgB,eACAC,gBACAC,gBACAC,SACAC,YACAC,WACCZ,QAAQ,cACbH,OAAAC,EAAA,EAAAD,CAACgB,EAAA,EAAD,CAAMC,SAAU,SAAAC,GAAI,OAAIC,MAAMC,KAAKC,UAAUH,KAAQf,QAAQ,QAC3DH,OAAAC,EAAA,EAAAD,CAACsB,EAAA,EAAD,CAAOC,KAAK,OAAOC,YAAY,aAAarB,QAAQ,UACpDH,OAAAC,EAAA,EAAAD,CAAA,WAIAA,OAAAC,EAAA,EAAAD,CAACyB,EAAA,EAAQC,SAAT,KACG,SAAAC,GAAA,IACKC,EADLD,EACKC,aADL,OAES5B,OAAAC,EAAA,EAAAD,CAAA,UAAQ6B,QAAS,SAAAC,GAAC,OAAIF,EAAaE,KAAnC,oBAIZ9B,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,kBADR,kBAGAJ,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,whBAAiiBC,QAAS,CAC3kBX,QACAJ,kBACAgB,eACAC,gBACAC,gBACAC,SACAC,YACAC,WACCZ,QAAQ,cACbH,OAAAC,EAAA,EAAAD,CAACgB,EAAA,EAAD,CAAMe,cAAe,CACfC,WAAY,QACZC,UAAW,SACVhB,SAAU,SAAAC,GAAI,OAAIC,MAAMC,KAAKC,UAAUH,EAAM,KAAM,KAAKf,QAAQ,QACrEH,OAAAC,EAAA,EAAAD,CAACsB,EAAA,EAAD,CAAOC,KAAK,aAAaC,YAAY,mBAAmBrB,QAAQ,UAChEH,OAAAC,EAAA,EAAAD,CAAA,WACAA,OAAAC,EAAA,EAAAD,CAACsB,EAAA,EAAD,CAAOC,KAAK,YAAYC,YAAY,kBAAkBrB,QAAQ,UAC9DH,OAAAC,EAAA,EAAAD,CAAA,WAIAA,OAAAC,EAAA,EAAAD,CAACyB,EAAA,EAAQC,SAAT,KACG,SAAAQ,GAAA,IACKN,EADLM,EACKN,aADL,OAES5B,OAAAC,EAAA,EAAAD,CAAA,UAAQ6B,QAAS,SAAAC,GAAC,OAAIF,EAAaE,KAAnC,yBAIZ9B,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,UADR,UAGAJ,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,2jBAAokBC,QAAS,CAC9mBX,QACAJ,kBACAgB,eACAC,gBACAC,gBACAC,SACAC,YACAC,WACCZ,QAAQ,cACbH,OAAAC,EAAA,EAAAD,CAACgB,EAAA,EAAD,CAAMmB,OAAQxB,mBAASyB,MAAM,CACvBJ,WAAYpB,mBAASyB,SAAS,0BAC9BJ,UAAWrB,qBACTK,SAAU,SAAAC,GAAI,OAAIC,MAAMC,KAAKC,UAAUH,KAAQf,QAAQ,QAC7DH,OAAAC,EAAA,EAAAD,CAACsB,EAAA,EAAD,CAAOC,KAAK,aAAaC,YAAY,mBAAmBrB,QAAQ,UAChEH,OAAAC,EAAA,EAAAD,CAAA,WACAA,OAAAC,EAAA,EAAAD,CAACsB,EAAA,EAAD,CAAOC,KAAK,YAAYC,YAAY,kBAAkBrB,QAAQ,UAC9DH,OAAAC,EAAA,EAAAD,CAAA,WAIAA,OAAAC,EAAA,EAAAD,CAACyB,EAAA,EAAQC,SAAT,KACG,SAAAY,GAAA,IACKV,EADLU,EACKV,aADL,OAES5B,OAAAC,EAAA,EAAAD,CAAA,UAAQ6B,QAAS,SAAAC,GAAC,OAAIF,EAAaE,KAAnC,0BAQhBnC,EAAW4C,gBAAiB,qlBCxH5B,IAAMC,EAAa,SAAA5C,GAOb,IANJ2B,EAMI3B,EANJ2B,KACAkB,EAKI7C,EALJ6C,MACAC,EAII9C,EAJJ8C,UACAP,EAGIvC,EAHJuC,OACAQ,EAEI/C,EAFJ+C,MACGC,EACC7C,EAAAH,EAAA,+CACEiD,EAAMC,WADR,MAAAC,EASAC,YAAW,CACbzB,KADaA,EAEbsB,IAFaA,EAGbV,OAHaA,EAIbQ,UARAM,EALEF,EAAAE,MAMFC,EANEH,EAAAG,UAOFC,EAPEJ,EAAAI,aAiBErD,6UAAKsD,CAAA,GAAAR,EAAA,GAjBP7C,EAAAgD,EAAA,sCAiBO,CAGTI,aAHSA,EAITD,UAJSA,EAKTL,QAGF,OACE7C,OAAAqD,EAAA,EAAArD,CAAAsD,EAAAC,EAAAC,SAAA,KACIf,GAASzC,OAAAqD,EAAA,EAAArD,CAAA,SAAOyD,QAAUP,GAD9BT,GAGIC,EACA1C,OAAAqD,EAAA,EAAArD,CAAA,WADSF,GAGTE,OAAAqD,EAAA,EAAArD,CAAA,QANJF,GASImD,GAASjD,OAAAqD,EAAA,EAAArD,CAAA,YAVfiD,KAeFT,eAA0B,CACxBC,MADwB,KAExBC,WAFwB,EAGxBP,OAHwB,KAIxBQ,MAAO,MAWTe,EAAA","file":"component---dist-form-form-docz-mdx-79c91b20719b1d25a690.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesbliss/Sites/@jamesbliss/bambino-form/.docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { object, string } from 'yup';\nimport Form from '../../src/Form/Form';\nimport Context from '../../src/Context/Context';\nimport Input from '../../src/Input/Input';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"form\"\n    }}>{`Form`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component is the most important element of the puzzle, it controls the flow and logic of all that reside within it.`}</p>\n    <p><inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` is the place you set a parent schema, initial data set and the sumbit fuction.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'<Form onSubmit={data => alert(JSON.stringify(data))}>\\n  <Input name=\\\"name\\\" placeholder=\\\"Enter name\\\" />\\n  <br />\\n  {/* This is required because docz doesn\\'t support form submission ü§¶‚Äç */}\\n  <Context.Consumer>\\n    {({ handleSubmit }) => (\\n      <button onClick={e => handleSubmit(e)}>Submit name </button>\\n    )}\\n  </Context.Consumer>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      object,\n      string,\n      Form,\n      Context,\n      Input\n    }} mdxType=\"Playground\">\n  <Form onSubmit={data => alert(JSON.stringify(data))} mdxType=\"Form\">\n    <Input name='name' placeholder='Enter name' mdxType=\"Input\" />\n    <br />\n    {\n          /* This is required because docz doesn't support form submission ü§¶‚Äç */\n        }\n    <Context.Consumer>\n      {({\n            handleSubmit\n          }) => <button onClick={e => handleSubmit(e)}>Submit name </button>}\n    </Context.Consumer>\n  </Form>\n    </Playground>\n    <h2 {...{\n      \"id\": \"initial-values\"\n    }}>{`Initial values`}</h2>\n    <Playground __position={1} __code={'<Form\\n  initialValues={{\\n    first_name: \\'James\\',\\n    last_name: \\'Bliss\\',\\n  }}\\n  onSubmit={data => alert(JSON.stringify(data, null, 2))}\\n>\\n  <Input name=\\\"first_name\\\" placeholder=\\\"Enter first name\\\" />\\n  <br />\\n  <Input name=\\\"last_name\\\" placeholder=\\\"Enter last name\\\" />\\n  <br />\\n  {/* This is required because docz doesn\\'t support form submission ü§¶‚Äç */}\\n  <Context.Consumer>\\n    {({ handleSubmit }) => (\\n      <button onClick={e => handleSubmit(e)}>Submit full name </button>\\n    )}\\n  </Context.Consumer>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      object,\n      string,\n      Form,\n      Context,\n      Input\n    }} mdxType=\"Playground\">\n  <Form initialValues={{\n        first_name: 'James',\n        last_name: 'Bliss'\n      }} onSubmit={data => alert(JSON.stringify(data, null, 2))} mdxType=\"Form\">\n    <Input name='first_name' placeholder='Enter first name' mdxType=\"Input\" />\n    <br />\n    <Input name='last_name' placeholder='Enter last name' mdxType=\"Input\" />\n    <br />\n    {\n          /* This is required because docz doesn't support form submission ü§¶‚Äç */\n        }\n    <Context.Consumer>\n      {({\n            handleSubmit\n          }) => <button onClick={e => handleSubmit(e)}>Submit full name </button>}\n    </Context.Consumer>\n  </Form>\n    </Playground>\n    <h2 {...{\n      \"id\": \"schema\"\n    }}>{`Schema`}</h2>\n    <Playground __position={2} __code={'<Form\\n  schema={object().shape({\\n    first_name: string().required(\\'First name is required\\'),\\n    last_name: string(),\\n  })}\\n  onSubmit={data => alert(JSON.stringify(data))}\\n>\\n  <Input name=\\\"first_name\\\" placeholder=\\\"Enter first name\\\" />\\n  <br />\\n  <Input name=\\\"last_name\\\" placeholder=\\\"Enter last name\\\" />\\n  <br />\\n  {/* This is required because docz doesn\\'t support form submission ü§¶‚Äç */}\\n  <Context.Consumer>\\n    {({ handleSubmit }) => (\\n      <button onClick={e => handleSubmit(e)}>Submit full name </button>\\n    )}\\n  </Context.Consumer>\\n</Form>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      object,\n      string,\n      Form,\n      Context,\n      Input\n    }} mdxType=\"Playground\">\n  <Form schema={object().shape({\n        first_name: string().required('First name is required'),\n        last_name: string()\n      })} onSubmit={data => alert(JSON.stringify(data))} mdxType=\"Form\">\n    <Input name='first_name' placeholder='Enter first name' mdxType=\"Input\" />\n    <br />\n    <Input name='last_name' placeholder='Enter last name' mdxType=\"Input\" />\n    <br />\n    {\n          /* This is required because docz doesn't support form submission ü§¶‚Äç */\n        }\n    <Context.Consumer>\n      {({\n            handleSubmit\n          }) => <button onClick={e => handleSubmit(e)}>Submit full name </button>}\n    </Context.Consumer>\n  </Form>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// helper\nimport useDefault from '../useDefault';\n\n// exported component\nconst InputField = ({\n  name,\n  label,\n  multiline,\n  schema,\n  value,\n  ...rest\n}) => {\n  const ref = React.useRef(null);\n\n  // custom behaviour and logic from useField\n  const {\n    error,\n    fieldName,\n    defaultValue,\n    ...bag\n  } = useDefault({\n    name,\n    ref,\n    schema,\n    value\n  });\n\n  // props to be spread on input elemnt\n  const props = {\n    ...rest,\n    ...bag,\n    defaultValue,\n    fieldName,\n    ref\n  };\n\n  return (\n    <>\n      { label && <label htmlFor={ fieldName }>{ label }</label> }\n\n      { multiline ? (\n        <textarea { ...props } />\n      ) : (\n        <input { ...props } />\n      ) }\n\n      { error && <span>{ error }</span> }\n    </>\n  );\n};\n\nInputField.defaultProps = {\n  label: null,\n  multiline: false,\n  schema: null,\n  value: null\n};\n\nInputField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  multiline: PropTypes.bool,\n  schema: PropTypes.any,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nexport default InputField;"],"sourceRoot":""}