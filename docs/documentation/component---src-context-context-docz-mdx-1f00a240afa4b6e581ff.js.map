{"version":3,"sources":["webpack:///../src/Context/Context.docz.mdx","webpack:///../src/Input/Input.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_9__","_extends","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_11__","__position","__code","__scope","Playground","Props","object","string","Form","Context","Input","_src_Form_Form__WEBPACK_IMPORTED_MODULE_13__","onSubmit","_","_src_Input_Input__WEBPACK_IMPORTED_MODULE_15__","name","schema","required","placeholder","_src_Context_Context__WEBPACK_IMPORTED_MODULE_14__","Consumer","Function","prototype","toJSON","this","toString","JSON","stringify","data","alert","_ref2","handleSubmit","errors","disabled","keys","length","onClick","e","isMDXComponent","InputField","label","multiline","value","rest","ref","React","_useDefault","useDefault","error","fieldName","defaultValue","_objectSpread","_emotion_core__WEBPACK_IMPORTED_MODULE_9__","react__WEBPACK_IMPORTED_MODULE_10___default","a","Fragment","className","htmlFor","__webpack_exports__"],"mappings":"2fAWO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,sIACFC,CAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,EAAAD,CAACP,EAADS,EAAA,GAAeV,EAAiBM,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAI5EH,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,WADR,WAGAJ,OAAAC,EAAA,EAAAD,CAAA,gBAAWA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,eAAX,2KACAL,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,eADR,eAGAJ,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,kgBAAugBC,QAAS,CACjjBX,QACAJ,kBACAgB,eACAC,UACAC,gBACAC,gBACAC,SACAC,YACAC,WACCb,QAAQ,cACZ,kBAAMH,OAAAC,EAAA,EAAAD,CAACiB,EAAA,EAAD,CAAMC,SAAU,SAAAC,GAAC,OAAIA,GAAGhB,QAAQ,QACnCH,OAAAC,EAAA,EAAAD,CAACoB,EAAA,EAAD,CAAOC,KAAK,OAAOC,OAAQT,mBAASU,SAAS,oBAAqBC,YAAY,aAAarB,QAAQ,UACnGH,OAAAC,EAAA,EAAAD,CAACyB,EAAA,EAAQC,SAAT,KACG,SAAA5B,GAQG,OANA6B,SAASC,UAAUC,OAAS,WAC1B,OAAOC,KAAKC,YAKP/B,OAAAC,EAAA,EAAAD,CAAA,WAAMgC,KAAKC,UAAUnC,EAAO,KAAM,SAKjDE,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,kBADR,kBAGAJ,OAAAC,EAAA,EAAAD,CAAA,wGACAA,OAAAC,EAAA,EAAAD,CAAA,iDACAA,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,8jBAAmkBC,QAAS,CAC7mBX,QACAJ,kBACAgB,eACAC,UACAC,gBACAC,gBACAC,SACAC,YACAC,WACCb,QAAQ,cACZ,kBAAMH,OAAAC,EAAA,EAAAD,CAACiB,EAAA,EAAD,CAAMC,SAAU,SAAAgB,GAAI,OAAIC,MAAMH,KAAKC,UAAUC,EAAM,KAAM,KAAK/B,QAAQ,QACzEH,OAAAC,EAAA,EAAAD,CAACoB,EAAA,EAAD,CAAOC,KAAK,OAAOC,OAAQT,mBAASU,SAAS,oBAAqBC,YAAY,aAAarB,QAAQ,UACnGH,OAAAC,EAAA,EAAAD,CAAA,WAIAA,OAAAC,EAAA,EAAAD,CAACyB,EAAA,EAAQC,SAAT,KACG,SAAAU,GAAA,IACGC,EADHD,EACGC,aACAC,EAFHF,EAEGE,OAFH,OAGOtC,OAAAC,EAAA,EAAAD,CAAA,UAAQuC,SAAUvC,OAAOwC,KAAKF,GAAQG,OAAQC,QAAS,SAAAC,GAAC,OAAIN,EAAaM,KAAzE,0BAUhBhD,EAAWiD,gBAAiB,0yBC7F5B,IAAMC,EAAa,SAAAjD,GAOb,IANJyB,EAMIzB,EANJyB,KACAyB,EAKIlD,EALJkD,MACAC,EAIInD,EAJJmD,UACAzB,EAGI1B,EAHJ0B,OACA0B,EAEIpD,EAFJoD,MACGC,EACClD,EAAAH,EAAA,+CACEsD,EAAMC,WADR,MAAAC,EASAC,YAAW,CACbhC,KADaA,EAEb6B,IAFaA,EAGb5B,OAHaA,EAIb0B,UARAM,EALEF,EAAAE,MAMFC,EANEH,EAAAG,UAOFC,EAPEJ,EAAAI,aAiBE1D,6UAAK2D,CAAA,GAAAR,EAAA,GAjBPlD,EAAAqD,EAAA,sCAiBO,CAGTI,aAHSA,EAITN,QAGF,OACElD,OAAA0D,EAAA,EAAA1D,CAAA2D,EAAAC,EAAAC,SAAA,KACIf,GAAS9C,OAAA0D,EAAA,EAAA1D,CAAA,SAAO8D,UAAP,cAA+BC,QAAUR,GADtDT,GAGIC,EACA/C,OAAA0D,EAAA,EAAA1D,CAAA,WAAAE,EAAA,CAAU4D,UAAU,kBADXhE,IAGTE,OAAA0D,EAAA,EAAA1D,CAAA,QAAAE,EAAA,CAAO4D,UAAU,eANrBhE,IASIwD,GAAStD,OAAA0D,EAAA,EAAA1D,CAAA,QAAM8D,UAAU,eAV/BR,KAeFT,eAA0B,CACxBC,MADwB,KAExBtB,YAFwB,GAGxBuB,WAHwB,EAIxBzB,OAJwB,KAKxB0B,MAAO,MAkBTgB,EAAA","file":"component---src-context-context-docz-mdx-1f00a240afa4b6e581ff.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesbliss/Sites/@jamesbliss/bambino-form/.docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { object, string } from 'yup';\nimport Form from '../../src/Form/Form';\nimport Context from '../../src/Context/Context';\nimport Input from '../../src/Input/Input';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"context\"\n    }}>{`Context`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Context />`}</inlineCode>{` offers access to various props without going through other hooks and components. If you want direct access to the context powering the current form this is you go to!`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'() => (\\n  <Form onSubmit={_ => _}>\\n    <Input\\n      name=\\\"name\\\"\\n      schema={string().required(\\'Name is required\\')}\\n      placeholder=\\\"Enter name\\\"\\n    />\\n    <Context.Consumer>\\n      {props => {\\n        /* hack so you can see functions üôà */\\n        Function.prototype.toJSON = function() {\\n          return this.toString()\\n        }\\n        /* rending everything out of the context! */\\n        return <pre>{JSON.stringify(props, null, 2)}</pre>\\n      }}\\n    </Context.Consumer>\\n  </Form>\\n)'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      object,\n      string,\n      Form,\n      Context,\n      Input\n    }} mdxType=\"Playground\">\n  {() => <Form onSubmit={_ => _} mdxType=\"Form\">\n      <Input name='name' schema={string().required('Name is required')} placeholder='Enter name' mdxType=\"Input\" />\n      <Context.Consumer>\n        {props => {\n            /* hack so you can see functions üôà */\n            Function.prototype.toJSON = function () {\n              return this.toString();\n            };\n            /* rending everything out of the context! */\n\n\n            return <pre>{JSON.stringify(props, null, 2)}</pre>;\n          }}\n      </Context.Consumer>\n    </Form>}\n    </Playground>\n    <h2 {...{\n      \"id\": \"disable-submit\"\n    }}>{`Disable Submit`}</h2>\n    <p>{`With this contextual power you can do things like disabling the submit if there are errors.`}</p>\n    <p>{`I'll leave you to come up with me üòÖ`}</p>\n    <Playground __position={1} __code={'() => (\\n  <Form onSubmit={data => alert(JSON.stringify(data, null, 2))}>\\n    <Input\\n      name=\\\"name\\\"\\n      schema={string().required(\\'Name is required\\')}\\n      placeholder=\\\"Enter name\\\"\\n    />\\n    <br />\\n    {/* This is required because docz doesn\\'t support form submission ü§¶‚Äç */}\\n    <Context.Consumer>\\n      {({ handleSubmit, errors }) => (\\n        <button\\n          disabled={Object.keys(errors).length}\\n          onClick={e => handleSubmit(e)}\\n        >\\n          Submit full name\\n        </button>\\n      )}\\n    </Context.Consumer>\\n  </Form>\\n)'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      object,\n      string,\n      Form,\n      Context,\n      Input\n    }} mdxType=\"Playground\">\n  {() => <Form onSubmit={data => alert(JSON.stringify(data, null, 2))} mdxType=\"Form\">\n      <Input name='name' schema={string().required('Name is required')} placeholder='Enter name' mdxType=\"Input\" />\n      <br />\n      {\n          /* This is required because docz doesn't support form submission ü§¶‚Äç */\n        }\n      <Context.Consumer>\n        {({\n            handleSubmit,\n            errors\n          }) => <button disabled={Object.keys(errors).length} onClick={e => handleSubmit(e)}>\n            Submit full name\n          </button>}\n      </Context.Consumer>\n    </Form>}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// helper\nimport useDefault from '../useDefault';\n\n// exported component\nconst InputField = ({\n  name,\n  label,\n  multiline,\n  schema,\n  value,\n  ...rest\n}) => {\n  const ref = React.useRef(null);\n\n  // custom behaviour and logic from useField\n  const {\n    error,\n    fieldName,\n    defaultValue,\n    ...bag\n  } = useDefault({\n    name,\n    ref,\n    schema,\n    value\n  });\n\n  // props to be spread on input elemnt\n  const props = {\n    ...rest,\n    ...bag,\n    defaultValue,\n    ref\n  };\n\n  return (\n    <>\n      { label && <label className='form__label' htmlFor={ fieldName }>{ label }</label> }\n\n      { multiline ? (\n        <textarea className='form__textarea' { ...props } />\n      ) : (\n        <input className='form__input' { ...props } />\n      ) }\n\n      { error && <span className='form__error'>{ error }</span> }\n    </>\n  );\n};\n\nInputField.defaultProps = {\n  label: null,\n  placeholder: '',\n  multiline: false,\n  schema: null,\n  value: null\n};\n\nInputField.propTypes = {\n  /** Name and ID for the field. This will define what this is called in the output */\n  name: PropTypes.string.isRequired,\n  /** Label to show next to the checkbox */\n  label: PropTypes.string,\n  /** placeholder text */\n  placeholder: PropTypes.string,\n  /** <textarea /> or <input /> */\n  multiline: PropTypes.bool,\n  /** Field level schema, will be overriden if a schema is passed into the <Form /> */\n  schema: PropTypes.any,\n  /** Initial value to populate the check state */\n  value: PropTypes.PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nexport default InputField;"],"sourceRoot":""}