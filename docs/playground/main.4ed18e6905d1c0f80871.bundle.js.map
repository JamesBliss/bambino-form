{"version":3,"file":"main.4ed18e6905d1c0f80871.bundle.js","sources":["webpack:///./src/Form/Form.js"],"sourcesContent":["import React from 'react';\nimport dot from 'dot-object';\nimport { reach, object, mixed, array } from 'yup';\nimport PropTypes from 'prop-types';\nimport merge from 'deepmerge';\nimport { useDebouncedCallback } from 'use-debounce';\n\n// context\nimport FormContext from '../Context';\n\n// helper\nconst looptheloop = obj => {\n  const shape = {};\n\n  Object.keys(obj).forEach(key => {\n    if (obj[key] === undefined) return;\n    const keyType = obj[key].constructor.name;\n\n    if (keyType === 'Object') {\n      shape[key] = object().shape(looptheloop(obj[key]));\n    } else if (keyType === 'Array') {\n      const result = Object.keys(obj[key]).reduce(\n        (r, k) => ({ ...r, ...obj[key][k] }),\n        {}\n      );\n\n      shape[key] = array().of(object().shape(looptheloop({ ...result })));\n    } else {\n      shape[key] = obj[key];\n    }\n  });\n  return shape;\n};\n\n// exported\nconst Form = ({\n  initialValues,\n  children,\n  schema,\n  onSubmit,\n  fieldDebounced,\n  tagName,\n  ...rest\n}) => {\n  const [fields, setFields] = React.useState([]);\n  const [errors, setErrors] = React.useState({});\n  const [initialData, setInitialData] = React.useState({});\n\n  React.useEffect(() => {\n    setInitialData(JSON.parse(JSON.stringify(initialValues)));\n  }, []);\n\n  function parseForm() {\n    const data = JSON.parse(JSON.stringify(initialValues));\n    const parsedDymanicSchema = {};\n\n    fields.forEach(({ name, ref, path, parseValue, dymanicSchema }) => {\n      const value = dot.pick(path, ref);\n\n      if (dymanicSchema) {\n        parsedDymanicSchema[name] = dymanicSchema;\n      } else {\n        parsedDymanicSchema[name] = mixed().notRequired();\n      }\n\n      data[name] = typeof parseValue === 'function' ? parseValue(value) : value;\n    });\n\n    dot.object(parsedDymanicSchema);\n    dot.object(data);\n\n    return {\n      data,\n      dymanicSchema: object().shape(looptheloop(parsedDymanicSchema))\n    };\n  }\n\n  function resetForm() {\n    fields.forEach(({ ref, path, clearValue }) => {\n      if (clearValue) {\n        return clearValue(ref);\n      }\n\n      return dot.set(path, '', ref);\n    });\n  }\n\n  async function handleDebouncedFieldValidation({ name, value }) {\n    const { data, dymanicSchema } = parseForm();\n\n    try {\n      const runSchema = schema || dymanicSchema;\n      if (runSchema) {\n        await reach(runSchema, name, data).validate(value);\n      }\n\n      const { [name]: remove, ...remaining } = errors;\n      setErrors(remaining);\n    } catch (err) {\n      const validationErrors = { ...errors };\n\n      if (err.message) {\n        validationErrors[name] = err.message;\n      }\n\n      setErrors(validationErrors);\n    }\n  }\n\n  // Debounce callback\n  const [handleFieldValidation] = useDebouncedCallback(\n    // function\n    ({ name, value }) => {\n      handleDebouncedFieldValidation({ name, value });\n    },\n    // delay in ms\n    fieldDebounced\n  );\n\n  async function handleValidation() {\n    const { data, dymanicSchema } = parseForm();\n    let castData = data;\n    let finalDataSet = {};\n\n    try {\n      const runSchema = schema || dymanicSchema;\n      if (runSchema) {\n        await runSchema.validate(data, {\n          abortEarly: false,\n          stripUnknown: true,\n          context: {}\n        });\n\n        castData = runSchema.cast(data, {\n          stripUnknown: true,\n          context: {}\n        });\n\n        finalDataSet = merge(initialData, castData, {\n          arrayMerge: (destinationArray, sourceArray) => {\n            return sourceArray.map((mapArray, index) => {\n              if (typeof mapArray === 'string') {\n                return destinationArray.push(mapArray);\n              }\n              return ({\n                ...destinationArray[index],\n                ...mapArray\n              });\n            });\n          }\n        });\n      }\n\n      setErrors({});\n\n      if (typeof onSubmit === 'function') {\n        onSubmit(finalDataSet, { resetForm });\n      }\n      return { errors: {}, data: finalDataSet, resetForm };\n    } catch (err) {\n      const validationErrors = {};\n\n      if (!err.inner) {\n        throw err;\n      }\n\n      err.inner.forEach((error) => {\n        validationErrors[error.path] = error.message;\n      });\n\n      setErrors(validationErrors);\n      return { errors: validationErrors, data: finalDataSet, resetForm };\n    }\n  }\n\n  async function handleSubmit(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    return handleValidation();\n  }\n\n  function registerField(field) {\n    setFields(state => [...state, field]);\n  }\n\n  function unregisterField(name) {\n    setFields(state => state.filter(field => field.name !== name));\n  }\n\n  return (\n    <FormContext.Provider\n      value={ {\n        initialValues,\n        errors,\n        scopePath: '',\n        registerField,\n        unregisterField,\n        getFields: parseForm,\n        handleFieldValidation,\n        handleResetForm: resetForm,\n        handleSubmit\n      } }\n    >\n      { React.createElement(\n        tagName,\n        { ...rest, onSubmit: handleSubmit },\n        children\n      ) }\n    </FormContext.Provider>\n  );\n};\n\n\nForm.defaultProps = {\n  initialValues: {},\n  schema: null,\n  fieldDebounced: 10,\n  tagName: 'form'\n};\n\nForm.propTypes = {\n  /** Initial values to populate the form */\n  initialValues: PropTypes.object,\n  /** Overall yup validation object. ‚ùóÔ∏è Will override inline field level schema */\n  schema: PropTypes.object,\n  /** Any react childrent you would like üòÅ */\n  children: PropTypes.any.isRequired,\n  /** Function which returns the data object and a resetForm function */\n  onSubmit: PropTypes.func.isRequired,\n  /** Debounces the handleFieldValidation function */\n  fieldDebounced: PropTypes.number,\n  /** Element / tag the wrapper of the children that are rendered */\n  tagName: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func\n  ])\n};\n\nexport default Form;"],"mappings":"AAWA","sourceRoot":""}