{"version":3,"sources":["webpack:///../dist/Form/Form.docz.mdx","webpack:///../src/Input/Input.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","_mdx_js_react__WEBPACK_IMPORTED_MODULE_7__","_extends","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_9__","of","Form","isMDXComponent","InputField","name","label","multiline","schema","value","rest","ref","React","_useDefault","useDefault","error","fieldName","defaultValue","_objectSpread","_emotion_core__WEBPACK_IMPORTED_MODULE_8__","react__WEBPACK_IMPORTED_MODULE_9___default","a","Fragment","htmlFor","__webpack_exports__"],"mappings":"0eAWO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,sIACFC,CAAAH,EAAA,gBACD,OAAOI,OAAAC,EAAA,EAAAD,CAACP,EAADS,EAAA,GAAeV,EAAiBM,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAI5EH,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,QADR,QAGAJ,OAAAC,EAAA,EAAAD,CAAA,gBAAWA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,YAAX,wHACAL,OAAAC,EAAA,EAAAD,CAAA,SAAGA,OAAAC,EAAA,EAAAD,CAAA,cAAYK,WAAW,KAAvB,YAAH,mFACAL,OAAAC,EAAA,EAAAD,CAAA,KAAQ,CACNI,GAAM,SADR,SAGAJ,OAAAC,EAAA,EAAAD,CAACM,EAAA,EAAD,CAAOC,GAAIC,IAAML,QAAQ,WAK7BR,EAAWc,gBAAiB,qlBCpC5B,IAAMC,EAAa,SAAAd,GAOb,IANJe,EAMIf,EANJe,KACAC,EAKIhB,EALJgB,MACAC,EAIIjB,EAJJiB,UACAC,EAGIlB,EAHJkB,OACAC,EAEInB,EAFJmB,MACGC,EACCjB,EAAAH,EAAA,+CACEqB,EAAMC,WADR,MAAAC,EASAC,YAAW,CACbT,KADaA,EAEbM,IAFaA,EAGbH,OAHaA,EAIbC,UARAM,EALEF,EAAAE,MAMFC,EANEH,EAAAG,UAOFC,EAPEJ,EAAAI,aAiBEzB,6UAAK0B,CAAA,GAAAR,EAAA,GAjBPjB,EAAAoB,EAAA,sCAiBO,CAGTI,aAHSA,EAITD,UAJSA,EAKTL,QAGF,OACEjB,OAAAyB,EAAA,EAAAzB,CAAA0B,EAAAC,EAAAC,SAAA,KACIhB,GAASZ,OAAAyB,EAAA,EAAAzB,CAAA,SAAO6B,QAAUP,GAD9BV,GAGIC,EACAb,OAAAyB,EAAA,EAAAzB,CAAA,WADSF,GAGTE,OAAAyB,EAAA,EAAAzB,CAAA,QANJF,GASIuB,GAASrB,OAAAyB,EAAA,EAAAzB,CAAA,YAVfqB,KAeFX,eAA0B,CACxBE,MADwB,KAExBC,WAFwB,EAGxBC,OAHwB,KAIxBC,MAAO,MAWTe,EAAA","file":"component---dist-form-form-docz-mdx-2fccee11ba13d3234614.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesbliss/Sites/@jamesbliss/bambino-form/.docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { object, string } from 'yup';\nimport Form from '../../src/Form/Form';\nimport Context from '../../src/Context/Context';\nimport Input from '../../src/Input/Input';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"form\"\n    }}>{`Form`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` component is the most important element of the puzzle, it controls the flow and logic of all that reside within it.`}</p>\n    <p><inlineCode parentName=\"p\">{`<Form />`}</inlineCode>{` is the place you set a parent schema, initial data set and the sumbit fuction.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Form} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// helper\nimport useDefault from '../useDefault';\n\n// exported component\nconst InputField = ({\n  name,\n  label,\n  multiline,\n  schema,\n  value,\n  ...rest\n}) => {\n  const ref = React.useRef(null);\n\n  // custom behaviour and logic from useField\n  const {\n    error,\n    fieldName,\n    defaultValue,\n    ...bag\n  } = useDefault({\n    name,\n    ref,\n    schema,\n    value\n  });\n\n  // props to be spread on input elemnt\n  const props = {\n    ...rest,\n    ...bag,\n    defaultValue,\n    fieldName,\n    ref\n  };\n\n  return (\n    <>\n      { label && <label htmlFor={ fieldName }>{ label }</label> }\n\n      { multiline ? (\n        <textarea { ...props } />\n      ) : (\n        <input { ...props } />\n      ) }\n\n      { error && <span>{ error }</span> }\n    </>\n  );\n};\n\nInputField.defaultProps = {\n  label: null,\n  multiline: false,\n  schema: null,\n  value: null\n};\n\nInputField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string,\n  multiline: PropTypes.bool,\n  schema: PropTypes.any,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n\nexport default InputField;"],"sourceRoot":""}